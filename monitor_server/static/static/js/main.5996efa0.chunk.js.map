{"version":3,"sources":["logo.svg","components/NavBar.jsx","components/Jumbotron.jsx","components/utils/ColorPicker.jsx","components/visualization/ImageCard.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","NavBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","text","react_default","a","createElement","reactstrap_es","color","className","href","src","height","React","Component","MyJumbotron","console","log","_this2","name","id","placeholder","onChange","e","updateText","target","value","ColorPicker","oldProps","show","setState","rgb","change","closePicker","isOpen","backdrop","lib","onChangeComplete","handleChange","bind","onClick","closeModal","formatter","concat","ImageCard","width","scale","imgScale","offset","x","y","displayPicker","maskPoints","maskHover","alpha","baseColor","maskColor","handleResize","assertThisInitialized","prevProps","resizeCount","imgWidth","imgHeight","length","divElement","clientWidth","clientHeight","new_width","new_height","img_scale","imgW","imgH","points","undefined","map","c","convert","hsl","newColor","r","g","b","ColorPicker_ColorPicker","changeColor","ref","ReactKonva","scaleX","scaleY","image","pos","key","onMouseEnter","enableMaskHover","onMouseLeave","fill","stroke","onTouchStart","strokeWidth","tension","closed","title","subtitle","description","nextButtons","slider","style","display","previousItem","nextItem","defaultValue","tipFormatter","sliderUpdate","marks","0","50","100","App","window","addEventListener","removeEventListener","Image","crossOrigin","onload","NavBar_NavBar","xs","ImageCard_ImageCard","Jumbotron_MyJumbotron","update","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.5996efa0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, {Component} from 'react';\nimport {\n  Navbar,\n  NavbarToggler,\n  NavbarBrand,\n  NavItem\n} from 'reactstrap';\n\nexport default class NavBar extends React.Component {\n    constructor(props) {\n      super(props);\n      this.props = props;\n      this.state = {\n        text: \"Text\"\n      }\n    }\n\n    render() {\n      return (\n        <div>\n          <Navbar  color=\"dark\" className=\"navbar-fixed-top navbar-custom navbar-dark\">\n            <NavbarBrand href=\"https://biomedicalcomputervision.uniandes.edu.co\">\n            <img  src=\"https://biomedicalcomputervision.uniandes.edu.co/images/logo_uniandes_w.png\" height=\"60\"/>\n              URL: {this.props.text}\n            </NavbarBrand>\n          </Navbar>\n        </div>\n      );\n    }\n}\n","import React, { Component } from 'react';\nimport { Jumbotron, InputGroup, Input, Col, Row } from 'reactstrap';\n\nexport default class MyJumbotron extends Component {\n    constructor(props) {\n        super(props);\n        this.props = props;\n        this.state = {\n            text: \"\"\n        }\n        console.log(\"sdfsdfsdfsdf\");\n    }\n\n    render() {\n        return (\n            <div>\n                <Jumbotron>\n                    <InputGroup>\n                        <Input name=\"email\" id=\"exampleEmail\" placeholder=\"with a placeholder\"\n                               onChange={e => {this.props.updateText(e.target.value)}}\n                        />\n                    </InputGroup>\n                </Jumbotron>\n            </div>\n        );\n    }\n}","\nimport React from 'react';\nimport { SketchPicker } from 'react-color';\nimport { Modal, ModalHeader, ModalBody, ModalFooter, Button } from 'reactstrap';\n\nexport default class ColorPicker extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      color: this.props.color,\n    }\n  }\n\n  componentDidUpdate(oldProps) {\n    if(!oldProps.show && this.props.show) {\n      this.setState({color: this.props.color})\n    }\n  }\n\n  handleChange(color) {\n    // let rgb = color.rgba;\n    this.setState({color: color.rgb});\n  }\n\n  closeModal(change) {\n    // console.log(this.state.actualColor);\n    this.props.closePicker(change ? this.state.color : this.props.color);\n  }\n\n  render() {\n    return (\n      <Modal isOpen={this.props.show} backdrop={true}>\n        <ModalHeader>Color Picker</ModalHeader>\n        <ModalBody>\n          <SketchPicker color={ this.state.color }\n            onChangeComplete={this.handleChange.bind(this)}\n          />\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"success\"\n            onClick={this.closeModal.bind(this, true)}>\n            Apply\n          </Button>\n          <Button color=\"danger\"\n            onClick={this.closeModal.bind(this, false)}>\n            Close\n          </Button>\n        </ModalFooter>\n      </Modal>\n    )\n  }\n}\n","import React, {Component} from \"react\";\nimport { Stage, Layer, Image, Line } from \"react-konva\";\nimport { Card, CardImg, CardText, CardBody,\n         CardTitle, CardSubtitle, ButtonGroup, Button,\n         CardFooter } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { Slider } from 'antd';\nimport convert from 'color-convert';\n\nimport ColorPicker from '../utils/ColorPicker.jsx';\nimport './styles/ImageCard.css';\n\nfunction formatter(value) {\n  return `${value / 100}`;\n}\n\nexport default class ImageCard extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          \"width\": 1,\n          \"height\": 1,\n          \"scale\": 1.0,\n          \"imgScale\": 1.0,\n          \"offset\": {\n            \"x\": 0,\n            \"y\": 0\n          },\n          \"displayPicker\": false,\n          \"maskPoints\": [],\n          \"maskHover\": false,\n          \"alpha\": 0.5,\n          \"baseColor\": [190, 4, 4],\n          \"maskColor\": [190, 4, 4]\n        }\n        this.handleResize = this.handleResize.bind(this);\n    }\n\n    componentDidUpdate(prevProps) {\n      if(this.props.resizeCount > prevProps.resizeCount) {\n          this.handleResize();\n      }\n      if(this.props.imgWidth !== prevProps.imgWidth) {\n        this.handleResize();\n      }\n      if(this.props.imgHeight !== prevProps.imgHeight) {\n        this.handleResize();\n      }\n\n      if(this.props.maskPoints && (\n        (this.props.maskPoints.length !== prevProps.maskPoints.length) ||\n        (this.props.maskPoints.length > 0 && (\n          this.props.maskPoints[0].length != prevProps.maskPoints[0].length)))) {\n        this.handleResize();\n      }\n    }\n\n    handleResize() {\n      const width = this.divElement.clientWidth;\n      const height = this.divElement.clientHeight;\n\n      const scale = width / this.state.width;\n      var new_width = this.state.width * scale;\n      var new_height = this.state.height * scale;\n\n      const img_scale = width / this.props.imgWidth\n      const imgW = img_scale * this.props.imgWidth;\n      const imgH = img_scale * this.props.imgHeight;\n\n      new_width =  imgW < imgH ? width : imgW\n      new_height = imgH;\n\n      var points = [];\n      if(this.props.maskPoints !== undefined) {\n        points = this.props.maskPoints.map(c => c.map(p => (p * img_scale)));\n      }\n      let offset = {\"x\": (new_width - imgW) / 2, \"y\": (new_height - imgH) / 2}\n\n      this.setState({'width': new_width, 'height': new_height, 'scale': scale,\n                     'imgScale': img_scale, 'offset': offset,\n                     'maskPoints': points});\n    }\n\n    enableMaskHover() {\n      var color = this.state.baseColor;\n      if(!this.state.maskHover) {\n        color = convert.rgb.hsl(color);\n        color[2] += 40\n        color = convert.hsl.rgb(color);\n        // color = [this.state.baseColor[0], this.state.baseColor[0], this.state.baseColor[0]]\n      }\n\n      this.setState({\"maskHover\": !this.state.maskHover,\n                     \"maskColor\": color});\n    }\n\n    changeColor(color) {\n      let newColor = [color.r, color.g, color.b];\n      this.setState({displayPicker: false,\n                     baseColor: newColor,\n                     maskColor: newColor,\n                     alpha: color.a});\n    }\n\n    displayPicker() {\n      this.setState({displayPicker: true});\n    }\n\n    render() {\n       return (\n         <Card>\n           <ColorPicker show={this.state.displayPicker}\n             closePicker={this.changeColor.bind(this)}\n             color={{'r': this.state.baseColor[0],\n               'g': this.state.baseColor[1],\n               'b': this.state.baseColor[2],\n             'a': this.state.alpha}}\n           />\n           <div className=\"stage-parent\" ref={ divElement => {\n           this.divElement = divElement}}>\n             <Stage width={this.state.width} height={this.state.height}>\n               <Layer>\n                 <Image\n                   x={this.state.offset.x}\n                   y={this.state.offset.y} width={this.props.imgWidth}\n                   height={this.props.imgHeight} scaleX={this.state.imgScale}\n                   scaleY={this.state.imgScale} image={this.props.image}\n                 />\n                 {this.state.maskPoints.map((points, pos) => <Line\n                   key={pos}\n                   points={points}\n                   onMouseEnter={this.enableMaskHover.bind(this)}\n                   onMouseLeave={this.enableMaskHover.bind(this)}\n                   fill={`rgba(${this.state.maskColor[0]},\n                               ${this.state.maskColor[1]},\n                               ${this.state.maskColor[2]},\n                               ${this.state.alpha})`}\n                   stroke=\"white\"\n                   // onContextMenu={this.displayPicker.bind(this)}\n                   onClick={this.displayPicker.bind(this)}\n                   onTouchStart={this.displayPicker.bind(this)}\n                   strokeWidth={2} x={0} y={0} tension={1.0} closed/>)}\n               </Layer>\n             </Stage>\n           </div>\n           <CardBody>\n             <CardTitle>{this.props.title}</CardTitle>\n             <CardSubtitle>{this.props.subtitle}</CardSubtitle>\n             <CardText>{this.props.description}</CardText>\n           </CardBody>\n           {this.props.nextButtons || this.props.slider ? <CardFooter>\n             <ButtonGroup className=\"flex-wrap\" style={{\"display\":\n               this.props.nextButtons ? \"\" : \"none\"}}>\n               <Button onClick={this.props.previousItem}>Previous</Button>\n               <Button onClick={this.props.nextItem}>Next</Button>\n             </ButtonGroup>\n             {/* <CardText style={{\"display\": */}\n             {/* this.props.slider ? \"\" : \"none\"}}>IoU Threshold</CardText> */}\n             <Slider style={{\"display\": this.props.slider ? \"\" : \"none\"}}\n               defaultValue={20} tipFormatter={formatter}\n               onChange={this.props.sliderUpdate}\n               marks={{0: '0', 50: '0.5', 100: '1'}}\n             />\n           </CardFooter> : null}\n         </Card>\n       )\n    }\n}\n\nImageCard.propTypes = {\n  nextButtons: PropTypes.bool\n}\n","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport NavBar from './components/NavBar.jsx';\nimport MyJumbotron from './components/Jumbotron.jsx';\nimport { Row, Col, Container } from 'reactstrap';\nimport ImageCard from './components/visualization/ImageCard.jsx';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.props = props;\n    this.state = {\n      text: \"Blablablabla\",\n      image: null,\n      height: 100,\n      width: 100,\n      resizeCount: -1\n    }\n  }\n\n  componentDidMount() {\n    window.addEventListener('resize', this.handleResize.bind(this));\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('resize', this.handleResize.bind(this));\n  }\n\n  handleResize() {\n    this.setState({ resizeCount: this.state.resizeCount + 1});\n  }\n\n  update(text) {\n    this.setState({text: text});\n    console.log(text);\n    let image = new window.Image();\n    image.crossOrigin = \"anonymous\";\n    image.onload = () => {\n      console.log(\"Image ?\");\n      console.log(image.width);\n      console.log(image.height);\n      this.setState({image: image, height: image.height, width: image.width});\n      console.log(image);\n    }\n    image.src = text;\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <NavBar text={this.state.text}/>\n        {/* <Container> */}\n        <div className=\"app-content\">\n          <Row>\n            <Col xs=\"6\">\n              <ImageCard image={this.state.image} imgWidth={this.state.width}\n                        imgHeight={this.state.height} title=\"Title\"\n                        resizeCount={this.state.resizeCount} />\n            </Col>\n            <Col xs=\"6\">\n              <MyJumbotron updateText={this.update.bind(this)}/>\n            </Col>\n          </Row>\n        </div>\n        {/* </Container> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}